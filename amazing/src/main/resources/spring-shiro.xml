<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx.xsd">
    
    <!-- 1. 配置 SecurityManager! -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="sampleRealm"/>
    </bean>

	 <!--  
    2. 配置 CacheManager. 
    -->    
    <!-- 用户缓存 -->
	<!-- <bean id="customShiroCacheManager" class="com.yxx.amazing.core.shiro.cache.impl.CustomShiroCacheManager">
	    <property name="shiroCacheManager" ref="jedisShiroCacheManager"/>
	</bean> -->
   <!-- redis 的缓存 -->
   <!--  <bean id="jedisManager" class="com.yxx.amazing.core.shiro.cache.JedisManager">
    	<property name="jedisPool" ref="jedisPool"/>
	</bean>
	shiro 缓存实现，对ShiroCacheManager，我是采用redis的实现
	<bean id="jedisShiroCacheManager" class="com.yxx.amazing.core.shiro.cache.impl.JedisShiroCacheManager">
    	<property name="jedisManager" ref="jedisManager"/>
	</bean> -->
	
	<!-- 静态注入，相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<!-- <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	    <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
	    <property name="arguments" ref="securityManager"/>
	</bean> -->
	
 	
    	<!-- 3. 自定义 Realm  授权  认证 -->
     <bean id="sampleRealm" class="com.yxx.amazing.core.shiro.token.SampleRealm">
     	<property name="credentialsMatcher">
     		<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
     			<property name="hashAlgorithmName" value="MD5"></property>
     			<property name="hashIterations" value="1024"></property>
     		</bean>
     	</property>
     </bean>
   <!-- Shiro生命周期处理器   认证数据库存储 -->
<!--      <bean id="shiroManager" class="com.yxx.amazing.core.shiro.service.impl.ShiroManagerImpl"/>
    <bean id="login" class="com.yxx.amazing.core.shiro.filter.LoginFilter"/>
    <bean id="role" class="com.yxx.amazing.core.shiro.filter.RoleFilter"/>
    <bean id="permission" class="com.yxx.amazing.core.shiro.filter.PermissionFilter"/>
    <bean id="simple" class="com.yxx.amazing.core.shiro.filter.SimpleAuthFilter"/> -->
    
    
	   <!--  6. 配置 ShiroFilter. -->     
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="unauthorizedUrl" value="/NewFile.html"/> 
        <!--  
        	配置哪些页面需要受保护. 
        	以及访问这些页面需要的权限. 
        	1). anon 可以被匿名访问
        	2). authc 必须认证(即登录)后才可能访问的页面. 
        	3). logout 登出.
        	4). roles 角色过滤器
        		/student=roles[teacher]
				/teacher=perms["user:create"]
        -->
       <property name="filterChainDefinitions" >
            <value>  
	             /login=anon
				/pages/picture-list.html=authc,roles[图片管理员]
	        </value>  
        </property>
    </bean> 
	
	<!-- 4. 配置 LifecycleBeanPostProcessor. 可以自动的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法. -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
  
 	<!--    5. 开启shiro注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用. --> 
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean> 
</beans>

